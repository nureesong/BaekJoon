/************************************/
// [14500] 테트로미노 (골드4)
// 테트로미노 1개만 놓기 때문에 서로 다른 도형끼리 영향X
// 5가지 도형 회전,대칭시 총 19가지 모양 -> 1개 선택
// 44ms, 2996KB 
/************************************/

#include <iostream>
using namespace std;

int N, M;
int arr[500][500]; 

struct POS {
	int dr, dc;
};
// 5가지 도형의 모양별 차지하는 칸에 대한 Lookub Table
// 총 19가지 모양 중 1개의 테트로미노를 선택한다.
POS LUT[19][4] = {
	// 2*2 정사각형
	{{0,0},{0,1},{1,0},{1,1}},
	// 4*1 직사각형
	{{0,0},{0,1},{0,2},{0,3}}, {{0,0},{1,0},{2,0},{3,0}},
	// 번개모양
	{{0,0},{1,0},{1,1},{2,1}}, {{0,1},{1,0},{1,1},{2,0}}, 
	{{0,1},{0,2},{1,0},{1,1}}, {{0,0},{0,1},{1,1},{1,2}},
	// ㅗ 모양
	{{0,0},{0,1},{0,2},{1,1}}, {{0,1},{1,0},{1,1},{1,2}},
	{{0,0},{1,0},{2,0},{1,1}}, {{0,1},{1,1},{2,1},{1,0}},
	 // ㄴ 모양
	{{0,0},{1,0},{2,0},{2,1}}, {{0,1},{1,1},{2,1},{2,0}},
	{{0,0},{1,0},{2,0},{0,1}}, {{0,0},{0,1},{1,1},{2,1}},
	{{0,0},{1,0},{1,1},{1,2}}, {{0,2},{1,0},{1,1},{1,2}},
	{{0,0},{0,1},{0,2},{1,0}}, {{0,0},{0,1},{0,2},{1,2}}
};


// (r,c)에 i번 도형을 놓았을 때 4칸 합 계산
int CalcFourSum(int i, int r, int c) {
	int sum = 0;
	for (int k = 0; k < 4; k++) {
		int nr = r + LUT[i][k].dr;
		int nc = c + LUT[i][k].dc;
		
		// 영역을 벗어나는 위치에 놓으면 안 됨
		if (nr < 0 || nr >= N || nc < 0 || nc >= M) return -1;

		sum += arr[nr][nc];
	}
	return sum;
}

// i번 도형을 종이 (0,0)부터 놓으면서 4칸합 최댓값 구하기
int Solve() {
	int sol = 0;

	for (int i = 0; i < 19; i++) {
		for (int r = 0; r < N; r++) {
			for (int c = 0; c < M; c++) {
				int ret = CalcFourSum(i, r, c);
				sol = (ret > sol) ? ret : sol;
			}
		}
	}
	return sol;
}

void Input() {
	cin >> N >> M;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cin >> arr[i][j];
		}
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	Input();
	cout << Solve() << "\n";
}
